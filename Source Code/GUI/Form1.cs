using System;
using Microsoft.Win32;
using System.Threading;
using System.IO;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Reflection;

namespace CSharp_Source_Code {
    public partial class Form1 : Form {
        public Form1() { InitializeComponent(); }

        #region  [GLOBALS]
        public static class Global {
            // Main directory where will be stored all the configuration files
            public static string MainConfigDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + 
                                                       @"\Database Query Scheduler";

            // DB Listview
            public static Thread tUpdateReportStatus;
            // The name of the current selected database
            public static string SelectedDBName = "";


            #region [ENCRYPTION_DECRYPTION]
            public static string Encrypt(string Data) {
                return Convert.ToBase64String(xs8Cipher.Encrypt(Encoding.UTF8.GetBytes(Data), EncryptionKey, xs8CipherKey.Size_128bit));
            }
            public static string Decrypt(string Data) {
                return Encoding.UTF8.GetString(xs8Cipher.Decrypt(Convert.FromBase64String(Data), EncryptionKey, xs8CipherKey.Size_128bit));
            }
            // Encryption key used to encrypt some private information about the Databases
            public static string EncryptionKey = "G+KbPeShVkYp3s6v";
            #endregion
        }
        #endregion


        #region [CONFIGURATION_FILE]
        public static class Configuration {
            #region [MAIN]
            public static class Main {
                public static void Save(Form1 frm) {
                    if (!Directory.Exists(Global.MainConfigDirectory))
                        Directory.CreateDirectory(Global.MainConfigDirectory);

                    string[] 
                    _config    = new string[6];
                    _config[0] = "[|#|] !MAIN CONFIGURATION | DO NOT EDIT THIS FILE |! [|#|]";
                    _config[1] = frm.serverName_txbox.Text;
                    _config[2] = frm.serverPort_txtbox.Text;
                    _config[3] = frm.serverUID_txtbox.Text;
                    _config[4] = Global.Encrypt(frm.serverPassword_txtbox.Text);
                    _config[5] = frm.runBg_cbx.Checked.ToString();

                    File.WriteAllLines(String.Format("{0}\\main.config", Global.MainConfigDirectory), _config);
                }

                public static void Load(Form1 frm) {
                    string _configFilePath = String.Format("{0}\\main.config", Global.MainConfigDirectory);

                    if (File.Exists(_configFilePath)) {
                        string[] _config = File.ReadAllLines(_configFilePath);

                        frm.serverName_txbox.Text      = _config[1];
                        frm.serverPort_txtbox.Text     = _config[2];
                        frm.serverUID_txtbox.Text      = _config[3];
                        frm.serverPassword_txtbox.Text = Global.Decrypt(_config[4]);
                        if (_config[5] == "True")
                            frm.runBg_cbx.Checked = true;

                        try {
                            foreach (string _v in Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", false).GetValueNames()) {
                                if (_v == "Database Query Scheduler") {
                                    frm.runStartup_cbx.Checked = true;
                                    break;
                                }
                            }
                        } catch { }
                    }
                }
            }
            #endregion

            #region [DATABASE]
            public static class Database {
                private static string _dbDirPath = Global.MainConfigDirectory + @"\Databases";

                #region [ADD]
                public static void Add(string dbName) {
                    string   _dbFolder    = String.Format("{0}\\{1}", _dbDirPath, dbName);
                    string[] _dbStructure = new string[7];

                    #region [FILE_STRUCTURE]
                    // Warning header
                    _dbStructure[0] = "[|#|] !DO NOT EDIT THIS FILE! [|#|]";

                    // Database name
                    _dbStructure[1] = Global.Encrypt(dbName);
                    // Database last report status
                    _dbStructure[2] = Global.Encrypt("Scheduled report not yet created!");
                    // Database report directory
                    _dbStructure[3] = Global.Encrypt("");
                    // Database report file name
                    _dbStructure[4] = Global.Encrypt("");
                    // Database SQL command
                    _dbStructure[5] = Global.Encrypt("");
                    #endregion

                    if (!Directory.Exists(Global.MainConfigDirectory))
                        Directory.CreateDirectory(Global.MainConfigDirectory);

                    if (!Directory.Exists(_dbDirPath))
                        Directory.CreateDirectory(_dbDirPath);

                    if (!Directory.Exists(_dbFolder))
                        Directory.CreateDirectory(_dbFolder);

                    try {
                        File.WriteAllLines(String.Format("{0}\\scheduled_configuration.xs8db", _dbFolder), _dbStructure);
                    } catch {
                        MessageBox.Show("Unable to create the 'Scheduled Configuration Report File' for this database!", dbName, 
                                   MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                #endregion

                #region [LOAD_ALL]
                public static void LoadAll(Form1 frm) {
                    frm.dbMain_listview.Invoke((MethodInvoker)delegate () {

                        // We need this to avoid to "lose" the selected items from the listview after the update
                        List<string> _prevItems = new List<string>();
                        foreach (ListViewItem _item in frm.dbMain_listview.SelectedItems)
                            _prevItems.Add(_item.Text);

                        frm.dbMain_listview.BeginUpdate();
                        frm.dbMain_listview.Items.Clear();

                        string[] _dbStructure;
                        if (Directory.Exists(_dbDirPath)) {
                            try {
                                foreach (string _db in Directory.EnumerateDirectories(_dbDirPath + @"\")) {
                                    if (_db != null) {
                                        // Reads the 'Scheduled Configuration Report File'
                                        _dbStructure = File.ReadAllLines(String.Format("{0}\\scheduled_configuration.xs8db", _db));

                                        string[] _lviRow = new string[2];
                                        // Get the database name
                                        _lviRow[0] = Global.Decrypt(_dbStructure[1]);
                                        // Get the last report status
                                        _lviRow[1] = Global.Decrypt(_dbStructure[2]);

                                        #region [ADD_DB_TO_LISTVIEW]
                                        ListViewItem _lvi = new ListViewItem(_lviRow);

                                        frm.dbMain_listview.Items.Add(_lvi);
                                        foreach (ListViewItem _i in frm.dbMain_listview.Items) {
                                            _i.Font = (new Font(_i.Font, FontStyle.Bold));
                                            if (_i.Index % 2 == 0)
                                                _i.BackColor = Color.FromArgb(106, 173, 232);

                                            if (_i.SubItems[1].Text == "Scheduled report not yet created!") {
                                                _i.UseItemStyleForSubItems = false;

                                                if (_i.Index % 2 == 0)
                                                    _i.SubItems[1].BackColor = Color.FromArgb(106, 173, 232);

                                                _i.SubItems[1].ForeColor = Color.DarkRed;
                                            } else
                                            if (_i.SubItems[1].Text.Contains("Success")) {
                                                _i.UseItemStyleForSubItems = false;

                                                if (_i.Index % 2 == 0)
                                                    _i.SubItems[1].BackColor = Color.FromArgb(106, 173, 232);

                                                _i.SubItems[1].Font = new Font(_i.SubItems[1].Font, FontStyle.Bold);
                                                _i.SubItems[1].ForeColor = Color.Green;
                                            } else
                                            if (_i.SubItems[1].Text.Contains("Fail")) {
                                                _i.UseItemStyleForSubItems = false;

                                                if (_i.Index % 2 == 0)
                                                    _i.SubItems[1].BackColor = Color.FromArgb(106, 173, 232);

                                                _i.SubItems[1].Font = new Font(_i.SubItems[1].Font, FontStyle.Bold);
                                                _i.SubItems[1].ForeColor = Color.FromArgb(155, 0, 0);
                                            } else
                                            if (_i.SubItems[1].Text.Contains("Querying")) {
                                                _i.UseItemStyleForSubItems = false;

                                                if (_i.Index % 2 == 0)
                                                    _i.SubItems[1].BackColor = Color.FromArgb(106, 173, 232);

                                                _i.SubItems[1].Font = new Font(_i.SubItems[1].Font, FontStyle.Bold);
                                                _i.SubItems[1].ForeColor = Color.FromArgb(228, 247, 19);
                                            } else
                                            if (_i.SubItems[1].Text.Contains("Can't connect to the DB")) {
                                                _i.UseItemStyleForSubItems = false;

                                                if (_i.Index % 2 == 0)
                                                    _i.SubItems[1].BackColor = Color.FromArgb(106, 173, 232);

                                                _i.SubItems[1].Font = new Font(_i.SubItems[1].Font, FontStyle.Bold);
                                                _i.SubItems[1].ForeColor = Color.FromArgb(155, 0, 0);
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                try {
                                    // If before the updating was some items selected, we will reselect them
                                    // But only if the 'Edit' and 'Delete' buttons was actives
                                    for (int i = 0; i < _prevItems.Count; i++) {
                                        foreach (ListViewItem _item in frm.dbMain_listview.Items) {
                                            if (_item.Text == _prevItems[i]) {
                                                if (frm.editSchedReport_btn.Enabled == true || frm.deleteSchedReport_btn.Enabled == true) {
                                                    _item.Selected = true;
                                                    frm.dbMain_listview.TopItem = frm.dbMain_listview.Items[frm.dbMain_listview.Items.Count - 1];
                                                    frm.dbMain_listview.TopItem = _item;
                                                }
                                            }
                                        }
                                    }
                                } catch { }

                                frm.dbMain_listview.EndUpdate();
                            } catch {
                                MessageBox.Show(String.Format("Unable to load the 'Scheduled Configuration Report Files'\n" +
                                                "Try by deleting the 'Main Configuration Directory'\n\n" +
                                                "{0}", Global.MainConfigDirectory),
                                                "Error!",
                                                MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                            }
                        }
                    });
                }
                #endregion
            }
            #endregion
        }
        #endregion

        private void Form1_Load(object sender, EventArgs e) {
            #region [MAIN_FORM_SETTINGS]
            Text                = "Database Query Scheduler";
            version_label.Text += "1.1";
            dbMain_listview.DoubleBuffering(true);
            #endregion

            #region [REPORT_RUNNER]
            if (!File.Exists(String.Format("{0}\\report_runner.exe", Global.MainConfigDirectory)) || !File.Exists(String.Format("{0}\\CsvHelper.dll", Global.MainConfigDirectory))) {
                try {
                    if (!Directory.Exists(Global.MainConfigDirectory))
                        Directory.CreateDirectory(Global.MainConfigDirectory);

                    if (!Directory.Exists(String.Format("{0}\\Databases", Global.MainConfigDirectory)))
                        Directory.CreateDirectory(String.Format("{0}\\Databases", Global.MainConfigDirectory));

                    File.Copy(Directory.GetCurrentDirectory() + @"\report_runner.exe", Global.MainConfigDirectory + @"\report_runner.exe", true);
                    File.Copy(Directory.GetCurrentDirectory() + @"\CsvHelper.dll", Global.MainConfigDirectory + @"\CsvHelper.dll", true);
                } catch {
                    MessageBox.Show(
                        "Unable to find the 'report_runner.exe' file!\n\n" +
                        "To can proceed:\nExtract from the RAR archive the 'report_runner.exe' file and place it in the directory where this executable is running.",
                        "Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);

                    Application.Exit();
                }
            }
            #endregion

            Configuration.Main.Load(this);
            Configuration.Database.LoadAll(this);

            Global.tUpdateReportStatus = new Thread(UpdateReportStatus);
            Global.tUpdateReportStatus.Start();
        }

        #region [UPDATE_DB_LAST_REPORT_STATUS]
        public void UpdateReportStatus() {
            while (true) {
                Configuration.Database.LoadAll(this);

                Thread.Sleep(5000);
            }
        }
        #endregion

        #region [GUI_CONTROLS]

        #region [SERVER_&_PORT]
        private void serverDNS_txtbox_TextChanged(object sender, EventArgs e) {
            if (serverPort_txtbox.TextLength > 0) {
                addDB_btn.Enabled = true;
            } else {
                addDB_btn.Enabled = false;
            }

            if (serverName_txbox.TextLength == 0)
                addDB_btn.Enabled = false;
        }

        private void serverPort_txtbox_TextChanged(object sender, EventArgs e) {
            if (serverPort_txtbox.TextLength > 0) {
                for (UInt16 i = 0; i < serverPort_txtbox.TextLength; i++) {
                    if (!Char.IsDigit(serverPort_txtbox.Text[i])) {
                        serverPort_txtbox.Text = serverPort_txtbox.Text.Remove(i, 1);
                    }
                }
                serverPort_txtbox.SelectionStart = serverPort_txtbox.TextLength;

                if (serverName_txbox.TextLength > 0) {
                    addDB_btn.Enabled = true;
                } else {
                    addDB_btn.Enabled = false;
                }
            }

            if (serverPort_txtbox.TextLength == 0)
                addDB_btn.Enabled = false;
        }
        #endregion

        #region  [ADD_NEW_DB]
        // Add new Database control
        private void newDB_btn_Click(object sender, EventArgs e) {
            if (addDB_btn.Text == "Add new Database") {
                addDB_btn.Text         = "Cancel";
                dbName_txtbox.Text     = "";

                #region [GUI_CONTROL]
                separator0_lbl.Visible    = true;
                dbName_lbl.Visible        = true;
                dbName_txtbox.Visible     = true; dbName_txtbox.Focus();
                #endregion
            } else {
                string _dbName = dbName_txtbox.Text;

                if (!File.Exists(String.Format("{0}\\scheduled_configuration.xs8db", Global.MainConfigDirectory + @"\Databases\" + _dbName))) {
                    if (dbName_txtbox.TextLength > 0) {
                        if (dbName_txtbox.Text.Any(Path.GetInvalidFileNameChars().Contains)) {
                            MessageBox.Show("The database name contains invalid characters!", "Error",
                                            MessageBoxButtons.OK,
                                            MessageBoxIcon.Error);
                        } else {
                            // Saves also the main configuration in case if the 'Server' and 'Port' are changed
                            Configuration.Main.Save(this);

                            Configuration.Database.Add(dbName_txtbox.Text);
                            Configuration.Database.LoadAll(this);
                        }
                    }
                } else {
                    MessageBox.Show("Already exists a 'Scheduled Configuration Report File' for this database!", "Info",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Information);

                    // Reload all the databases task
                    Configuration.Database.LoadAll(this);
                    return;
                }

                #region [GUI_CONTROL]
                addDB_btn.Text            = "Add new Database";
                separator0_lbl.Visible    = false;
                dbName_lbl.Visible        = false;
                dbName_txtbox.Visible     = false;
                #endregion
            }
        }

        // If the database name textbox isn't empty
        // Change the button text to 'Save'
        // Otherwise change it to 'Cancel'
        private void dbName_txtbox_TextChanged(object sender, EventArgs e) {
            if (dbName_txtbox.TextLength > 0) {
                addDB_btn.Text = "Save";
            } else {
                addDB_btn.Text = "Cancel";
            }
        }

        // Enables/Disables the 'Delete' and 'Edit' button
        private void dbMain_listview_SelectedIndexChanged(object sender, EventArgs e) {
            if (dbMain_listview.SelectedIndices.Count == 1) {
                editSchedReport_btn.Enabled = true;
            } else {
                editSchedReport_btn.Enabled = false;
            }

            if (dbMain_listview.SelectedIndices.Count > 0)
                deleteSchedReport_btn.Enabled = true;

            if (dbMain_listview.SelectedIndices.Count == 0) {
                editSchedReport_btn.Enabled = false;
                deleteSchedReport_btn.Enabled = false;
            }
        }
        #endregion

        #region [EDIT_SCHEDULED_REPORT]
        private void editReport_btn_Click(object sender, EventArgs e) {
            // Retrieves the Selected DB Name to can pass the variable to the 'Edit Scheduled Report' form
            Global.SelectedDBName = ListViewEx.GetSelectedItem(dbMain_listview).Text;

            // Shows the 'Edit Schedule Report' form
            (new Form2()).ShowDialog();

            // Reload all databases configuration file
            Configuration.Database.LoadAll(this);

            editSchedReport_btn.Enabled     = false;
            deleteSchedReport_btn.Enabled = false;
        }
        #endregion

        #region [DELETE_SCHEDULED_REPORT]
        // Removes a Database
        private void deleteReport_btn_Click(object sender, EventArgs e) {
            if (MessageBox.Show("If you continue, this will delete the 'Scheduled Report File Task' for all the selected databases, are you sure?" +
                                "\n\n(The previous saved reports will NOT be deleted)",
                                String.Format("[{0}] Database(s) selected", dbMain_listview.SelectedIndices.Count), 
                                MessageBoxButtons.YesNo, 
                                MessageBoxIcon.Warning) == DialogResult.Yes) 
            {
                foreach (ListViewItem _db in dbMain_listview.SelectedItems) {
                    try {
                        // Delete the scheduled task from the 'Task Scheduler'
                        Form2.Global.TaskSrvc.RootFolder.DeleteTask(String.Format("{0}\\{1}", Form2.Global.TaskMainFolder, _db.Text), false);
                        // Delete the configuration file
                        File.Delete(String.Format("{0}\\scheduled_configuration.xs8db", Global.MainConfigDirectory + @"\Databases\" +
                                                  _db.Text));
                        // Delete the folder
                        Directory.Delete(Global.MainConfigDirectory + @"\Databases\" + _db.Text);
                    } catch {
                    MessageBox.Show(String.Format("Can't delete the 'Scheduled Configuration Report File' for the '{0}' database!",
                                    _db.Text), "Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                    }
                }
                

                deleteSchedReport_btn.Enabled = false;
                editSchedReport_btn.Enabled   = false;
                Configuration.Database.LoadAll(this);
            }
        }
        #endregion

        #endregion

        #region [BACKGROUND_MODE_&_REPORT_STATUS_THREAD]
        private void Form1_Shown(object sender, EventArgs e) {
            if (runBg_cbx.Checked) {
                Hide();
                notifyIcon1.Visible = true;
            }
        }

        private void runBg_cbx_CheckedChanged(object sender, EventArgs e) {
            Configuration.Main.Save(this);
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e) {
            notifyIcon1.Visible = false;
            Show();
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e) {
            if (runBg_cbx.Checked) {
                e.Cancel = true;
                Hide();

                notifyIcon1.Visible = true;
                notifyIcon1.ShowBalloonTip(1000);
            }

            // Close also the running Update Last Report Status thread
            Global.tUpdateReportStatus.Abort();
        }
        #endregion

        #region [AUTO_STARTUP]
        private void runStartup_cbx_CheckedChanged(object sender, EventArgs e) {
            RegistryKey _k = Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true);

            try {
                if (runStartup_cbx.Checked) {
                    _k.SetValue("Database Query Scheduler", Application.ExecutablePath);
                } else {
                    _k.DeleteValue("Database Query Scheduler");
                }
            } catch {
                MessageBox.Show("Unable to create or delete the value from the registry!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion
    }
}

#region [ENABLES_DOUBLEBUFFER_FOR_THE_LISTVIEW]
public static class ControlExtensions {
    public static void DoubleBuffering(this Control control, bool enable) {
        var method = typeof(Control).GetMethod("SetStyle", BindingFlags.Instance | BindingFlags.NonPublic);
        method.Invoke(control, new object[] { ControlStyles.OptimizedDoubleBuffer, enable });
    }
}
#endregion

#region [LISTVIEW_CLASS_EXTENSION]
internal static class ListViewEx {
    internal static ListViewItem GetSelectedItem(this ListView listView1) {
        return (listView1.SelectedItems.Count > 0 ? listView1.SelectedItems[0] : null);
    }
}
#endregion